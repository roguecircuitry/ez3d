import { Vec3Like } from "./vector";

export interface QuaternionLike {
  x: number;
  y: number;
  z: number;
  w: number;
}

export interface QuatSingleton {
  q: QuaternionLike;
  /**Create a quaternion struct instance, values default to identity*/
  create(x?: number, y?: number, z?: number, w?: number): QuaternionLike;
  identity (): QuatSingleton;
  copy(q: QuaternionLike): QuatSingleton;
  store(q: QuaternionLike): QuatSingleton;
  /**Generated by ChatGPT then modified to fit API style
   * Calculates this quaternion from radian based euler angles
   */
  fromEuler(euler: Vec3Like): QuatSingleton;
  mul(q: QuaternionLike): QuatSingleton;
}

export const quat: QuatSingleton = {
  q: { x: 0, y: 0, z: 0, w: 0 },

  create(x = 0, y = 0, z = 0, w = 1): QuaternionLike {
    return { x, y, z, w };
  },
  identity (): QuatSingleton {
    quat.q.x = 0;
    quat.q.y = 0;
    quat.q.z = 0;
    quat.q.w = 1;
    return quat;
  },
  copy(q: QuaternionLike): QuatSingleton {
    quat.q.x = q.x;
    quat.q.y = q.y;
    quat.q.z = q.z;
    quat.q.w = q.w;
    return quat;
  },
  store(q: QuaternionLike): QuatSingleton {
    q.x = quat.q.x;
    q.y = quat.q.y;
    q.z = quat.q.z;
    q.w = quat.q.w;
    return quat;
  },
  /**Generated by ChatGPT then modified to fit API style
   * Calculates this quaternion from radian based euler angles
   */
  fromEuler(euler: Vec3Like): QuatSingleton {
    const { x, y, z } = euler;
    const q = quat.q;

    // Convert the euler angles to quaternions
    q.x = Math.sin(x / 2) * Math.cos(y / 2) * Math.cos(z / 2) - Math.cos(x / 2) * Math.sin(y / 2) * Math.sin(z / 2);
    q.y = Math.cos(x / 2) * Math.sin(y / 2) * Math.cos(z / 2) + Math.sin(x / 2) * Math.cos(y / 2) * Math.sin(z / 2);
    q.z = Math.cos(x / 2) * Math.cos(y / 2) * Math.sin(z / 2) - Math.sin(x / 2) * Math.sin(y / 2) * Math.cos(z / 2);
    q.w = Math.cos(x / 2) * Math.cos(y / 2) * Math.cos(z / 2) + Math.sin(x / 2) * Math.sin(y / 2) * Math.sin(z / 2);

    return quat;
  },
  mul(q: QuaternionLike): QuatSingleton {    
    let x = quat.q.x * q.w + quat.q.w * q.x + quat.q.y * q.z - quat.q.z * q.y;
    let y = quat.q.y * q.w + quat.q.w * q.y + quat.q.z * q.x - quat.q.x * q.z;
    let z = quat.q.z * q.w + quat.q.w * q.z + quat.q.x * q.y - quat.q.y * q.x;
    let w = quat.q.w * q.w - quat.q.x * q.x - quat.q.y * q.y - quat.q.z * q.z;

    quat.q.x = x;
    quat.q.y = y;
    quat.q.z = z;
    quat.q.w = w;

    return quat;
  }

};
