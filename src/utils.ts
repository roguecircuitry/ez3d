
/**Generated by ChatGPT, Mar 25, 2023
 * An implementation of debouncing
*/
export function debounce(func: Function, delay: number) {
  let timeoutId: ReturnType<typeof setTimeout>;
  return function() {
    const context = this;
    const args = arguments;
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func.apply(context, args), delay);
  };
}

export const CONSTS = {
  /**Attribute for vertex position in a shader*/
  aVertex: "aVertex",
  /**Attribute for vertex color in a shader*/
  aColor: "aColor",

  /**Varying, for handing color per vertex from vertex shader to fragment shader*/
  vColor: "vColor",

  /**WebGLBuffer for vertices*/
  bVertices: "bVertices",
  /**WebGLBuffer for indices*/
  bIndices: "bIndices",
  /**WebGLBuffer for colors*/
  bColors: "bColors",
  
  /**Model transform + camera view + camera projection matrix*/
  uTransViewProjMatrix: "uTransViewProjMatrix"
};

export interface AssignTransformer<T> {
  (v: any): T;
}

/**Generated by ChatGPT, Mar 25, 2023*/
export function assignWithSpread<T>(target: T, source: any, transform: AssignTransformer<unknown>, ...keysToInclude: string[]): T {
  for (const key of keysToInclude) {
    if (source[key] !== undefined && source[key] !== null) {
      let value = source[key];
      if (transform) value = transform(value);
      target[key] = value;
    }
  }
  return target;
}

/**Generated by ChatGPT, Mar 25, 2023*/
// export function toIntegers(obj: Record<string, any>, deep = false): void {
//   for (const key in obj) {
//     if (typeof obj[key] === 'number') {
//       obj[key] = Math.floor(obj[key]);
//     } else if (deep && typeof obj[key] === 'object' && obj[key] !== null) {
//       toIntegers(obj[key], deep);
//     }
//   }
// }

// export const IntTrans: AssignTransformer<number> = parseInt;

/**Generated by ChatGPT, Mar 25, 2023*/
export function resize (canvas: HTMLCanvasElement, gl: WebGL2RenderingContext) {
  assignWithSpread(canvas, canvas.getBoundingClientRect(), parseInt, "width", "height");
  gl.viewport(0, 0, canvas.width, canvas.height);
  console.log("resize", canvas.width, canvas.height);
}
