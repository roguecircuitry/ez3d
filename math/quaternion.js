export const quat = {
  q: {
    x: 0,
    y: 0,
    z: 0,
    w: 0
  },
  create(x = 0, y = 0, z = 0, w = 0) {
    return {
      x,
      y,
      z,
      w
    };
  },
  copy(q) {
    quat.q.x = q.x;
    quat.q.y = q.y;
    quat.q.z = q.z;
    quat.q.w = q.w;
    return quat;
  },
  store(q) {
    q.x = quat.q.x;
    q.y = quat.q.y;
    q.z = quat.q.z;
    q.w = quat.q.w;
    return quat;
  },
  /**Generated by ChatGPT then modified to fit API style
   * Calculates this quaternion from radian based euler angles
   */
  fromEuler(euler) {
    const {
      x,
      y,
      z
    } = euler;
    const q = quat.q;

    // Convert the euler angles to quaternions
    q.x = Math.sin(x / 2) * Math.cos(y / 2) * Math.cos(z / 2) - Math.cos(x / 2) * Math.sin(y / 2) * Math.sin(z / 2);
    q.y = Math.cos(x / 2) * Math.sin(y / 2) * Math.cos(z / 2) + Math.sin(x / 2) * Math.cos(y / 2) * Math.sin(z / 2);
    q.z = Math.cos(x / 2) * Math.cos(y / 2) * Math.sin(z / 2) - Math.sin(x / 2) * Math.sin(y / 2) * Math.cos(z / 2);
    q.w = Math.cos(x / 2) * Math.cos(y / 2) * Math.cos(z / 2) + Math.sin(x / 2) * Math.sin(y / 2) * Math.sin(z / 2);
    return quat;
  },
  mul(q) {
    let x = quat.q.x * q.w + quat.q.w * q.x + quat.q.y * q.z - quat.q.z * q.y;
    let y = quat.q.y * q.w + quat.q.w * q.y + quat.q.z * q.x - quat.q.x * q.z;
    let z = quat.q.z * q.w + quat.q.w * q.z + quat.q.x * q.y - quat.q.y * q.x;
    let w = quat.q.w * q.w - quat.q.x * q.x - quat.q.y * q.y - quat.q.z * q.z;
    quat.q.x = x;
    quat.q.y = y;
    quat.q.z = z;
    quat.q.w = w;
    return quat;
  }
};